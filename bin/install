#!/usr/bin/env node

'use strict';

const {
  writeFileSync, readdirSync, renameSync, unlinkSync, readFileSync,
} = require('fs');
const path = require('path');
const crypto = require('crypto');
const { promisify } = require('util');
const inquirer = require('inquirer');
const { execSync } = require('child_process');

const randomBytesAsync = promisify(crypto.randomBytes);

const rootPath = path.join(__dirname, '..');
const configPath = path.join(__dirname, '..', 'config', 'config.json');
const mediaFilePath = path.join(__dirname, '..', 'media');

const colors = require('colors/safe');

(async () => {
  try {
    const installConfig = readFileSync(path.join(__dirname, '/configData', 'installConfig.json'), 'utf8');
    const installConfigJSON = JSON.parse(installConfig);
    
    const { createDbUser, createDatabase, grantDbUser } = {
      createDbUser: installConfigJSON.createDbUser,
      createDatabase: installConfigJSON.createDatabase,
      grantDbUser: installConfigJSON.grantDbUser,
    };

    const { dbHost, dbHostUserName, dbHostPassword, dbName, dbUserName, dbPassword } = {
      dbHost: installConfigJSON.dbHost,
      dbHostUserName: installConfigJSON.dbHostUserName,
      dbHostPassword: installConfigJSON.dbHostPassword,
      dbName: installConfigJSON.dbName,
      dbUserName: installConfigJSON.dbUserName,
      dbPassword: installConfigJSON.dbPassword,
    };

    if (createDatabase) {
      if (dbHost == 'localhost') {
        execSync(`sudo mysql -e "create database if not exists ${dbName};"`);
      } else {
        execSync(`sudo mysql -h${dbHost} -u${dbHostUserName} -p'${dbHostPassword}' -e "create database if not exists ${dbName};"`);
      } 
    }
    if (createDbUser) {
      if (dbHost == 'localhost') {
        execSync(`sudo mysql -e "create user if not exists '${dbUserName}'@'localhost' identified by '${dbPassword}';"`);
      } else {
        execSync(`sudo mysql -h${dbHost} -u${dbHostUserName} -p'${dbHostPassword}' -e "create user if not exists'${dbUserName}'@'%' identified by '${dbPassword}';"`);
      }
    }
    if (grantDbUser) {
      if (dbHost == 'localhost') {
        execSync(`sudo mysql -e "grant all privileges on ${dbName}.* to '${dbUserName}'@'localhost';"`);
        execSync('sudo mysql -e "flush privileges;"');
      } else {
        execSync(`sudo mysql -h${dbHost} -u${dbHostUserName} -p'${dbHostPassword}' -e "grant all privileges on ${dbName}.* to '${dbUserName}'@'%';"`);
        execSync(`sudo mysql -h${dbHost} -u${dbHostUserName} -p'${dbHostPassword}' -e "flush privileges;"`);
      }
    }
    console.log(colors.green('User/DB setup is complete.'));

    const secret = (await randomBytesAsync(48))
      .toString('base64')
      .replace(/\+/g, '-')
      .replace(/\//g, '_')
      .replace(/=/g, '');
    const config = {
      production: {
        secret,
        db: {
          username: createDbUser === true || grantDbUser === true ? dbUserName : dbHostUserName,
          password: createDbUser === true || grantDbUser === true ? dbPassword : dbHostPassword,
          database: dbName,
          host: dbHost,
          port: '3306',
          dialect: 'mysql',
          charset: 'utf8mb4',
          collate: 'utf8mb4_bin',
          pool: { max: 40, min: 0, idle: 10000 },
        },
        mediaFileStorage: {
          type: 'local',
        },
      },
      development: {
        secret,
        db: {
          username: createDbUser === true || grantDbUser === true ? dbUserName : dbHostUserName,
          password: createDbUser === true || grantDbUser === true ? dbPassword : dbHostPassword,
          database: dbName,
          host: dbHost,
          port: '3306',
          dialect: 'mysql',
          charset: 'utf8mb4',
          collate: 'utf8mb4_bin',
          pool: { max: 40, min: 0, idle: 10000 },
        },
        mediaFileStorage: {
          type: 'local',
        },
      },
    };
    const configJSON = JSON.stringify(config, null, 2);
    await writeFileSync(configPath, configJSON);
    const models = await require('../lib/models');
    if (installConfigJSON.firstTimeSetup) {
      await models.install({
        wikiName: installConfigJSON.wikiName,
        domain: installConfigJSON.wikiDomain,
        adminUsername: installConfigJSON.adminUsername,
        adminPassword: installConfigJSON.adminPassword,
        frontPageName: installConfigJSON.frontPageName,
      });
    }
    await models.sequelize.query(`
      ALTER TABLE articleSearch
      DROP INDEX article_search_content,
      ADD FULLTEXT INDEX article_search_content (content ASC)  COMMENT 'tokenizer "TokenBigramIgnoreBlankSplitSymbolAlphaDigit"'
    `);
    await models.sequelize.query('DROP TABLE IF EXISTS SequelizeMeta');
    await models.sequelize.query(`
      CREATE TABLE SequelizeMeta (
        name varchar(255) COLLATE utf8_unicode_ci NOT NULL,
        PRIMARY KEY (name),
        UNIQUE KEY name (name),
        UNIQUE KEY SequelizeMeta_name_unique (name)
      ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci
    `);
    const migrations = readdirSync(path.join(__dirname, '..', 'db-migrations'));
    for (const migration of migrations) {
      await models.sequelize.query(`
        INSERT INTO SequelizeMeta (name) VALUES (${models.sequelize.escape(migration)})
      `);
    }

    await models.initialize();

    if (installConfigJSON.firstTimeSetup) {
      readdirSync(path.join(__dirname, '..', 'media'))
        .filter(file => (file.indexOf('.') !== 0) && (!['removed', 'temp', '.gitkeep'].includes(file)))
        .forEach((file) => {
          renameSync(path.join(mediaFilePath, file), path.join(mediaFilePath, 'removed', file));
        });
      readdirSync(path.join(__dirname, '..', 'media', 'temp'))
        .filter(file => (file.indexOf('.') !== 0) && (!['.gitkeep'].includes(file)))
        .forEach((file) => {
          unlinkSync(path.join(mediaFilePath, 'temp', file));
        });
    }
    const ecosystemTemplate = readFileSync(path.join(__dirname, 'install-templates', 'ecosystem.config.js.template'), 'utf8');
    const ecosystemConfig = ecosystemTemplate
    .replace(/\{\{api_port\}\}/g, installConfigJSON.apiPort)
    .replace(/\{\{view_port\}\}/g, installConfigJSON.viewPort);
    writeFileSync(path.join(rootPath, 'ecosystem.config.js'), ecosystemConfig);
    console.log(colors.green('Install Done'));
    process.exit(0);
  } catch (err) {
    console.error(err);
    process.exit(1);
  }
})();
