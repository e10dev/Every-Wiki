#!/usr/bin/env node

/**
 * This script is used for reinstall the Wiki, keeping its settings.
 * It would be useful in development.
 */

'use strict';

const inquirer = require('inquirer');
const path = require('path');
const fs = require('fs');
const models = require('../lib/models');

const mediaFilePath = path.join(__dirname, '..', 'media');

(async () => {
  try {
    const answers = await inquirer.prompt([
      {
        type: 'input',
        name: 'adminUsername',
        message: 'Wiki admin username',
      },
      {
        type: 'password',
        name: 'adminPassword',
        message: 'Wiki admin password',
      },
      {
        type: 'input',
        name: 'wikiName',
        message: 'wiki name',
      },
      {
        type: 'input',
        name: 'wikiDomain',
        message: 'Wiki server domain name',
        default: 'localhost',
      },
      {
        type: 'input',
        name: 'frontPageName',
        message: 'wiki front page',
      },
    ]);
    await models.install({
      wikiName: answers.wikiName,
      domain: answers.wikiDomain,
      adminUsername: answers.adminUsername,
      adminPassword: answers.adminPassword,
      frontPageName: answers.frontPageName,
    });
    await models.sequelize.query(`
      ALTER TABLE articleSearch
      DROP INDEX article_search_content,
      ADD FULLTEXT INDEX article_search_content (content ASC)  COMMENT 'parser "TokenBigramIgnoreBlankSplitSymbolAlphaDigit"'
    `);
    await models.initialize();
    fs.readdirSync(path.join(__dirname, '..', 'media'))
      .filter(file => (file.indexOf('.') !== 0) && (!['removed', 'temp', '.gitkeep'].includes(file)))
      .forEach((file) => {
        fs.renameSync(path.join(mediaFilePath, file), path.join(mediaFilePath, 'removed', file));
      });
    fs.readdirSync(path.join(__dirname, '..', 'media', 'temp'))
      .filter(file => (file.indexOf('.') !== 0) && (!['.gitkeep'].includes(file)))
      .forEach((file) => {
        fs.unlinkSync(path.join(mediaFilePath, 'temp', file));
      });
    // await models.setTestInstances();
    process.exit(0);
  } catch (e) {
    console.error(e);
    process.exit(-1);
  }
})();
